---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Learning RxJs - redux">
    <h1>Redux</h1>
    <div class="container">
        <button class="btn" id="increment">+ 1</button>
        <button class="btn" id="decrement">- 1</button>
        <button class="btn" id="add">+ 10</button>
    </div>

    <pre></pre>
</Layout>

<script>

    import {Subject} from 'rxjs'
    import {scan, startWith, shareReplay} from 'rxjs/operators'

    const initialState = {
        counter: 0
    }

    const handlers = {
        INCREMENT: state =>  ({...state,
                         counter: state.counter + 1}),
        DECREMENT: state =>  ({...state,
                        counter: state.counter - 1}),
        ADD: (state, action) =>  ({...state,
            counter: state.counter + action.payload}),
        DEFAULT: state => state
    }

    const reducer = (state = initialState, action = {}) => {
        const handler = handlers[action.type] || handlers.DEFAULT
        return handler(state, action)
    }

    const createStore = (rootReducer) => {
        const subj$ = new Subject()
        const store = subj$.pipe(
            startWith({type: '__INIT__'}),
            scan(rootReducer, undefined),
            shareReplay(1)
        )

        store.dispatch = action => subj$.next(action)

        return store
    }

    const store$ = createStore(reducer)

const pre = document.querySelector('pre')

    store$.subscribe(state => {
        pre!.innerHTML = JSON.stringify(state, null, 2)
    })

    // events
    document.getElementById('increment')!
        .addEventListener('click', () => {
            store$.dispatch({type: 'INCREMENT'})
        })

    document.getElementById('decrement')!
        .addEventListener('click', () => {
            store$.dispatch({type: 'DECREMENT'})
        })
    
    document.getElementById('add')!
        .addEventListener('click', () => {
            store$.dispatch({type: 'ADD', payload: 10})
        })
</script>